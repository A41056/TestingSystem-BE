// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TestingSystem.Data.Db;

#nullable disable

namespace TestingSystem.Data.Migrations
{
    [DbContext(typeof(TestingSystemDbContext))]
    partial class TestingSystemDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TestingSystem.Data.Entities.Answer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("Correct")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("SortOrder")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("Answers", (string)null);
                });

            modelBuilder.Entity("TestingSystem.Data.Entities.Exam", b =>
                {
                    b.Property<Guid>("ExamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsAutoGrade")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ModifiedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("ExamId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("ExamId");

                    b.ToTable("Exams", (string)null);
                });

            modelBuilder.Entity("TestingSystem.Data.Entities.Question", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ExamId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Explanation")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool?>("IsSingleChoice")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("SortOrder")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ExamId");

                    b.HasIndex("Id");

                    b.ToTable("Questions", (string)null);
                });

            modelBuilder.Entity("TestingSystem.Data.Entities.Submission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ExamId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double?>("Score")
                        .HasColumnType("float");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("SubmittedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ExamId");

                    b.HasIndex("Id");

                    b.HasIndex("StudentId");

                    b.ToTable("Submissions", (string)null);
                });

            modelBuilder.Entity("TestingSystem.Data.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<short>("AccessFailedCount")
                        .HasColumnType("smallint");

                    b.Property<DateTime?>("BirthDay")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullTextSearch")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Gender")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("Email");

                    b.HasIndex("PhoneNumber");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserName");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("e0529d58-73e0-4b35-b93e-6675b23c39ed"),
                            AccessFailedCount = (short)0,
                            BirthDay = new DateTime(1990, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Created = new DateTime(2024, 3, 26, 15, 59, 16, 528, DateTimeKind.Utc).AddTicks(8611),
                            Deleted = false,
                            Email = "admin@example.com",
                            FirstName = "AdminFirstName",
                            FullName = "AdminFirstName AdminLastName",
                            FullTextSearch = "admin AdminFirstName AdminLastName admin@example.com 1234567890 Male",
                            Gender = "Male",
                            IsActive = true,
                            LastName = "AdminLastName",
                            Modified = new DateTime(2024, 3, 26, 15, 59, 16, 528, DateTimeKind.Utc).AddTicks(8615),
                            PasswordHash = new byte[] { 5, 29, 138, 124, 236, 91, 192, 82, 215, 180, 91, 175, 97, 107, 43, 8, 76, 103, 239, 226, 77, 144, 200, 74, 229, 59, 21, 77, 18, 141, 159, 83, 171, 193, 42, 57, 207, 106, 30, 210, 196, 33, 72, 189, 225, 121, 192, 202, 214, 17, 58, 59, 181, 57, 151, 154, 62, 251, 54, 17, 205, 39, 31, 8 },
                            PasswordSalt = new byte[] { 53, 51, 184, 160, 119, 165, 113, 169, 72, 104, 154, 175, 25, 208, 194, 215, 215, 209, 188, 99, 108, 48, 209, 229, 29, 144, 200, 66, 143, 102, 228, 241, 105, 55, 64, 151, 106, 82, 209, 91, 157, 117, 59, 156, 236, 147, 224, 57, 96, 97, 255, 140, 182, 122, 97, 134, 212, 33, 49, 89, 50, 84, 134, 69, 48, 129, 108, 57, 254, 62, 129, 252, 29, 229, 71, 119, 129, 121, 92, 189, 17, 247, 159, 108, 35, 137, 173, 0, 59, 120, 86, 101, 118, 197, 247, 219, 237, 199, 24, 14, 100, 103, 92, 112, 161, 122, 34, 18, 179, 52, 137, 108, 213, 239, 108, 203, 207, 5, 238, 92, 182, 0, 199, 215, 23, 113, 139, 241 },
                            PhoneNumber = "1234567890",
                            RoleId = new Guid("d39c0f72-689c-4880-aba3-a5d4082d0ae9"),
                            UserName = "admin"
                        },
                        new
                        {
                            Id = new Guid("8e98c066-a5ef-4cb1-9cf8-fb19359c57b1"),
                            AccessFailedCount = (short)0,
                            BirthDay = new DateTime(1985, 5, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Created = new DateTime(2024, 3, 26, 15, 59, 16, 528, DateTimeKind.Utc).AddTicks(8690),
                            Deleted = false,
                            Email = "teacher@example.com",
                            FirstName = "TeacherFirstName",
                            FullName = "TeacherFirstName TeacherLastName",
                            FullTextSearch = "teacher TeacherFirstName TeacherLastName teacher@example.com 9876543210 Female",
                            Gender = "Female",
                            IsActive = true,
                            LastName = "TeacherLastName",
                            Modified = new DateTime(2024, 3, 26, 15, 59, 16, 528, DateTimeKind.Utc).AddTicks(8691),
                            PasswordHash = new byte[] { 250, 187, 3, 79, 232, 79, 113, 206, 112, 134, 86, 171, 81, 91, 247, 35, 233, 87, 131, 130, 170, 157, 165, 61, 157, 66, 110, 238, 91, 16, 70, 159, 65, 186, 107, 215, 131, 192, 249, 115, 244, 27, 129, 102, 21, 175, 45, 124, 31, 54, 106, 207, 233, 222, 40, 198, 36, 58, 32, 2, 206, 158, 255, 120 },
                            PasswordSalt = new byte[] { 201, 123, 64, 176, 35, 128, 32, 244, 40, 133, 46, 184, 183, 126, 82, 199, 37, 249, 6, 20, 220, 33, 252, 72, 189, 9, 142, 101, 112, 66, 168, 206, 157, 119, 60, 54, 138, 195, 222, 3, 35, 250, 124, 233, 150, 80, 51, 127, 201, 160, 242, 201, 114, 195, 50, 32, 128, 184, 218, 108, 186, 171, 52, 143, 226, 174, 195, 64, 173, 7, 246, 97, 121, 53, 199, 57, 28, 242, 111, 25, 216, 84, 251, 184, 42, 39, 147, 34, 148, 223, 88, 49, 79, 209, 243, 251, 164, 164, 85, 151, 202, 176, 84, 175, 141, 135, 19, 126, 94, 136, 32, 226, 46, 28, 243, 65, 157, 197, 143, 37, 96, 20, 246, 166, 210, 116, 136, 118 },
                            PhoneNumber = "9876543210",
                            RoleId = new Guid("b3da35e0-122f-4aa6-ac40-3980182d4bae"),
                            UserName = "teacher"
                        },
                        new
                        {
                            Id = new Guid("f4d99c13-6f71-4d0f-9ff8-816aaa04b9d3"),
                            AccessFailedCount = (short)0,
                            BirthDay = new DateTime(2000, 10, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Created = new DateTime(2024, 3, 26, 15, 59, 16, 528, DateTimeKind.Utc).AddTicks(8730),
                            Deleted = false,
                            Email = "ronaldo@example.com",
                            FirstName = "Cristiano",
                            FullName = "Cristiano Ronaldo",
                            FullTextSearch = "user Cristiano Ronaldo ronaldo@example.com 5555555555 Male",
                            Gender = "Male",
                            IsActive = true,
                            LastName = "Ronaldo",
                            Modified = new DateTime(2024, 3, 26, 15, 59, 16, 528, DateTimeKind.Utc).AddTicks(8730),
                            PasswordHash = new byte[] { 12, 191, 201, 91, 227, 239, 228, 76, 27, 60, 110, 65, 148, 61, 5, 170, 249, 122, 42, 209, 46, 9, 190, 228, 166, 89, 115, 101, 229, 204, 135, 64, 161, 109, 239, 91, 235, 244, 42, 135, 148, 5, 144, 233, 249, 199, 83, 180, 55, 251, 113, 80, 111, 42, 146, 207, 166, 130, 114, 82, 141, 106, 229, 47 },
                            PasswordSalt = new byte[] { 77, 103, 192, 31, 91, 103, 67, 113, 100, 196, 134, 14, 38, 125, 227, 47, 150, 102, 12, 193, 252, 129, 128, 196, 124, 96, 57, 215, 160, 148, 124, 196, 70, 127, 22, 147, 92, 207, 226, 255, 9, 217, 209, 168, 120, 157, 23, 233, 100, 114, 111, 113, 66, 45, 81, 185, 125, 249, 138, 46, 180, 103, 163, 219, 130, 14, 101, 135, 84, 149, 189, 232, 78, 181, 219, 236, 77, 228, 228, 170, 38, 201, 98, 234, 150, 64, 199, 118, 125, 62, 104, 35, 251, 68, 197, 61, 41, 128, 141, 187, 206, 226, 181, 253, 57, 153, 134, 97, 40, 19, 43, 224, 147, 16, 109, 2, 151, 138, 89, 39, 171, 103, 202, 135, 60, 26, 0, 103 },
                            PhoneNumber = "5555555555",
                            RoleId = new Guid("2a03f8f6-db15-4fe7-97e4-9bac3339a472"),
                            UserName = "user"
                        });
                });

            modelBuilder.Entity("TestingSystem.Data.Entities.UserRole", b =>
                {
                    b.Property<Guid>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            RoleId = new Guid("d39c0f72-689c-4880-aba3-a5d4082d0ae9"),
                            RoleName = "Admin"
                        },
                        new
                        {
                            RoleId = new Guid("b3da35e0-122f-4aa6-ac40-3980182d4bae"),
                            RoleName = "Teacher"
                        },
                        new
                        {
                            RoleId = new Guid("2a03f8f6-db15-4fe7-97e4-9bac3339a472"),
                            RoleName = "User"
                        });
                });

            modelBuilder.Entity("TestingSystem.Data.Entities.WebUserChoose", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AnswerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AnswerText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("CorrectAnswer")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("WebUserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AnswerId");

                    b.HasIndex("QuestionId");

                    b.HasIndex("WebUserId");

                    b.ToTable("WebUserChooses", (string)null);
                });

            modelBuilder.Entity("TestingSystem.Data.Entities.Answer", b =>
                {
                    b.HasOne("TestingSystem.Data.Entities.Question", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("TestingSystem.Data.Entities.Exam", b =>
                {
                    b.HasOne("TestingSystem.Data.Entities.User", "Teacher")
                        .WithMany("Exams")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("TestingSystem.Data.Entities.Question", b =>
                {
                    b.HasOne("TestingSystem.Data.Entities.Exam", "Exam")
                        .WithMany("Questions")
                        .HasForeignKey("ExamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exam");
                });

            modelBuilder.Entity("TestingSystem.Data.Entities.Submission", b =>
                {
                    b.HasOne("TestingSystem.Data.Entities.Exam", "Exam")
                        .WithMany("Submissions")
                        .HasForeignKey("ExamId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TestingSystem.Data.Entities.User", "Student")
                        .WithMany("Submissions")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Exam");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("TestingSystem.Data.Entities.User", b =>
                {
                    b.HasOne("TestingSystem.Data.Entities.UserRole", "UserRole")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("UserRole");
                });

            modelBuilder.Entity("TestingSystem.Data.Entities.WebUserChoose", b =>
                {
                    b.HasOne("TestingSystem.Data.Entities.Answer", "Answer")
                        .WithMany("WebUserChooses")
                        .HasForeignKey("AnswerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TestingSystem.Data.Entities.Question", "Question")
                        .WithMany("WebUserChooses")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TestingSystem.Data.Entities.User", "WebUser")
                        .WithMany()
                        .HasForeignKey("WebUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Answer");

                    b.Navigation("Question");

                    b.Navigation("WebUser");
                });

            modelBuilder.Entity("TestingSystem.Data.Entities.Answer", b =>
                {
                    b.Navigation("WebUserChooses");
                });

            modelBuilder.Entity("TestingSystem.Data.Entities.Exam", b =>
                {
                    b.Navigation("Questions");

                    b.Navigation("Submissions");
                });

            modelBuilder.Entity("TestingSystem.Data.Entities.Question", b =>
                {
                    b.Navigation("Answers");

                    b.Navigation("WebUserChooses");
                });

            modelBuilder.Entity("TestingSystem.Data.Entities.User", b =>
                {
                    b.Navigation("Exams");

                    b.Navigation("Submissions");
                });

            modelBuilder.Entity("TestingSystem.Data.Entities.UserRole", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
