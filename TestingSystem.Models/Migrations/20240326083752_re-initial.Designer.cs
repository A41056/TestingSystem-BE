// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TestingSystem.Data.Db;

#nullable disable

namespace TestingSystem.Data.Migrations
{
    [DbContext(typeof(TestingSystemDbContext))]
    [Migration("20240326083752_re-initial")]
    partial class reinitial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TestingSystem.Data.Entities.Answer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("Correct")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("SortOrder")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("Answers", (string)null);
                });

            modelBuilder.Entity("TestingSystem.Data.Entities.Exam", b =>
                {
                    b.Property<Guid>("ExamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsAutoGrade")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ModifiedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("ExamId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("ExamId");

                    b.ToTable("Exams", (string)null);
                });

            modelBuilder.Entity("TestingSystem.Data.Entities.Question", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ExamId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Explanation")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool?>("IsSingleChoice")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("SortOrder")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ExamId");

                    b.HasIndex("Id");

                    b.ToTable("Questions", (string)null);
                });

            modelBuilder.Entity("TestingSystem.Data.Entities.Submission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ExamId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double?>("Score")
                        .HasColumnType("float");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("SubmittedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ExamId");

                    b.HasIndex("Id");

                    b.HasIndex("StudentId");

                    b.ToTable("Submissions", (string)null);
                });

            modelBuilder.Entity("TestingSystem.Data.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<short>("AccessFailedCount")
                        .HasColumnType("smallint");

                    b.Property<DateTime?>("BirthDay")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullTextSearch")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Gender")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("Email");

                    b.HasIndex("PhoneNumber");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserName");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("8f512463-eada-4c8e-b783-80c24d2d3e69"),
                            AccessFailedCount = (short)0,
                            BirthDay = new DateTime(1990, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Created = new DateTime(2024, 3, 26, 8, 37, 52, 206, DateTimeKind.Utc).AddTicks(245),
                            Deleted = false,
                            Email = "admin@example.com",
                            FirstName = "AdminFirstName",
                            FullName = "AdminFirstName AdminLastName",
                            FullTextSearch = "admin AdminFirstName AdminLastName admin@example.com 1234567890 Male",
                            Gender = "Male",
                            IsActive = true,
                            LastName = "AdminLastName",
                            Modified = new DateTime(2024, 3, 26, 8, 37, 52, 206, DateTimeKind.Utc).AddTicks(247),
                            PasswordHash = new byte[] { 50, 132, 182, 2, 16, 174, 2, 5, 251, 220, 54, 29, 174, 98, 50, 146, 192, 209, 158, 32, 248, 93, 203, 47, 134, 239, 254, 125, 161, 138, 128, 118, 75, 59, 39, 110, 233, 206, 159, 10, 80, 21, 188, 214, 220, 140, 111, 37, 247, 106, 22, 154, 194, 165, 175, 130, 233, 57, 244, 101, 23, 157, 43, 77 },
                            PasswordSalt = new byte[] { 245, 160, 44, 80, 155, 5, 193, 24, 81, 44, 217, 50, 173, 170, 56, 248, 106, 235, 186, 10, 7, 96, 152, 222, 12, 145, 149, 129, 35, 27, 0, 76, 173, 205, 35, 129, 204, 151, 172, 108, 233, 172, 54, 179, 55, 145, 209, 17, 168, 70, 9, 71, 0, 57, 119, 217, 120, 18, 34, 4, 169, 190, 157, 171, 211, 67, 52, 39, 1, 139, 197, 174, 246, 177, 181, 103, 134, 55, 149, 59, 31, 16, 94, 93, 211, 82, 148, 64, 134, 78, 33, 103, 90, 239, 99, 5, 24, 115, 98, 73, 134, 15, 110, 231, 185, 138, 180, 249, 75, 69, 109, 141, 121, 182, 213, 26, 166, 108, 235, 10, 219, 4, 18, 10, 135, 92, 35, 189 },
                            PhoneNumber = "1234567890",
                            RoleId = new Guid("b20f0149-7e57-4ddd-b013-e2f99b365212"),
                            UserName = "admin"
                        },
                        new
                        {
                            Id = new Guid("67d68547-c1cf-47c1-a84f-8fa4185731bf"),
                            AccessFailedCount = (short)0,
                            BirthDay = new DateTime(1985, 5, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Created = new DateTime(2024, 3, 26, 8, 37, 52, 206, DateTimeKind.Utc).AddTicks(315),
                            Deleted = false,
                            Email = "teacher@example.com",
                            FirstName = "TeacherFirstName",
                            FullName = "TeacherFirstName TeacherLastName",
                            FullTextSearch = "teacher TeacherFirstName TeacherLastName teacher@example.com 9876543210 Female",
                            Gender = "Female",
                            IsActive = true,
                            LastName = "TeacherLastName",
                            Modified = new DateTime(2024, 3, 26, 8, 37, 52, 206, DateTimeKind.Utc).AddTicks(315),
                            PasswordHash = new byte[] { 73, 25, 164, 89, 46, 251, 135, 75, 66, 15, 70, 3, 81, 149, 167, 25, 124, 68, 110, 223, 142, 27, 137, 60, 173, 111, 128, 65, 134, 150, 92, 100, 199, 200, 212, 187, 32, 67, 108, 238, 33, 105, 221, 53, 81, 183, 240, 231, 157, 26, 20, 20, 45, 193, 21, 230, 210, 215, 100, 73, 149, 146, 141, 122 },
                            PasswordSalt = new byte[] { 249, 3, 246, 57, 195, 17, 154, 232, 223, 20, 41, 88, 92, 89, 96, 171, 231, 215, 184, 254, 165, 177, 32, 189, 23, 152, 54, 74, 165, 182, 30, 33, 0, 228, 252, 210, 38, 177, 221, 185, 197, 42, 170, 200, 79, 219, 157, 241, 152, 106, 196, 225, 71, 84, 136, 229, 31, 145, 89, 20, 119, 241, 253, 29, 181, 46, 160, 36, 15, 190, 254, 191, 98, 174, 234, 121, 167, 217, 62, 11, 198, 1, 126, 181, 77, 72, 250, 20, 109, 55, 224, 74, 255, 116, 66, 199, 207, 53, 245, 235, 158, 70, 178, 188, 220, 159, 119, 141, 254, 230, 7, 246, 21, 170, 169, 96, 171, 236, 92, 18, 172, 35, 47, 160, 193, 184, 120, 60 },
                            PhoneNumber = "9876543210",
                            RoleId = new Guid("d447eca5-6e58-4519-9211-6c098dca0285"),
                            UserName = "teacher"
                        },
                        new
                        {
                            Id = new Guid("2ba0dd5e-123f-488c-84ed-f2da5bc9dd68"),
                            AccessFailedCount = (short)0,
                            BirthDay = new DateTime(2000, 10, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Created = new DateTime(2024, 3, 26, 8, 37, 52, 206, DateTimeKind.Utc).AddTicks(353),
                            Deleted = false,
                            Email = "ronaldo@example.com",
                            FirstName = "Cristiano",
                            FullName = "Cristiano Ronaldo",
                            FullTextSearch = "user Cristiano Ronaldo ronaldo@example.com 5555555555 Male",
                            Gender = "Male",
                            IsActive = true,
                            LastName = "Ronaldo",
                            Modified = new DateTime(2024, 3, 26, 8, 37, 52, 206, DateTimeKind.Utc).AddTicks(353),
                            PasswordHash = new byte[] { 91, 243, 90, 44, 98, 190, 114, 185, 191, 155, 108, 164, 40, 195, 133, 128, 171, 36, 223, 232, 249, 7, 170, 6, 173, 75, 92, 23, 2, 9, 220, 206, 207, 208, 28, 33, 229, 206, 79, 128, 235, 251, 233, 46, 250, 106, 109, 11, 235, 7, 116, 130, 198, 104, 164, 50, 125, 160, 71, 202, 219, 243, 203, 227 },
                            PasswordSalt = new byte[] { 229, 30, 55, 249, 93, 28, 60, 217, 61, 172, 221, 230, 143, 155, 142, 169, 92, 114, 205, 76, 77, 160, 126, 69, 49, 126, 215, 169, 90, 57, 248, 218, 206, 15, 10, 102, 75, 38, 92, 86, 240, 120, 252, 45, 184, 156, 200, 224, 66, 64, 4, 246, 103, 55, 220, 119, 72, 220, 201, 172, 64, 250, 9, 5, 25, 34, 217, 68, 139, 65, 207, 76, 189, 143, 44, 254, 142, 165, 141, 15, 224, 11, 197, 130, 79, 26, 245, 200, 27, 110, 129, 39, 19, 246, 9, 26, 103, 151, 193, 39, 19, 28, 86, 193, 61, 94, 74, 4, 37, 55, 37, 42, 39, 9, 244, 190, 24, 153, 119, 233, 24, 212, 108, 92, 197, 92, 45, 229 },
                            PhoneNumber = "5555555555",
                            RoleId = new Guid("0a28cb14-bf71-4bdb-88d9-042d4e483bd6"),
                            UserName = "user"
                        });
                });

            modelBuilder.Entity("TestingSystem.Data.Entities.UserRole", b =>
                {
                    b.Property<Guid>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            RoleId = new Guid("b20f0149-7e57-4ddd-b013-e2f99b365212"),
                            RoleName = "Admin"
                        },
                        new
                        {
                            RoleId = new Guid("d447eca5-6e58-4519-9211-6c098dca0285"),
                            RoleName = "Teacher"
                        },
                        new
                        {
                            RoleId = new Guid("0a28cb14-bf71-4bdb-88d9-042d4e483bd6"),
                            RoleName = "User"
                        });
                });

            modelBuilder.Entity("TestingSystem.Data.Entities.WebUserChoose", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AnswerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AnswerText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("CorrectAnswer")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("WebUserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AnswerId");

                    b.HasIndex("QuestionId");

                    b.HasIndex("WebUserId");

                    b.ToTable("WebUserChooses", (string)null);
                });

            modelBuilder.Entity("TestingSystem.Data.Entities.Answer", b =>
                {
                    b.HasOne("TestingSystem.Data.Entities.Question", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("TestingSystem.Data.Entities.Exam", b =>
                {
                    b.HasOne("TestingSystem.Data.Entities.User", "Teacher")
                        .WithMany("Exams")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("TestingSystem.Data.Entities.Question", b =>
                {
                    b.HasOne("TestingSystem.Data.Entities.Exam", "Exam")
                        .WithMany("Questions")
                        .HasForeignKey("ExamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exam");
                });

            modelBuilder.Entity("TestingSystem.Data.Entities.Submission", b =>
                {
                    b.HasOne("TestingSystem.Data.Entities.Exam", "Exam")
                        .WithMany("Submissions")
                        .HasForeignKey("ExamId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TestingSystem.Data.Entities.User", "Student")
                        .WithMany("Submissions")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Exam");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("TestingSystem.Data.Entities.User", b =>
                {
                    b.HasOne("TestingSystem.Data.Entities.UserRole", "UserRole")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("UserRole");
                });

            modelBuilder.Entity("TestingSystem.Data.Entities.WebUserChoose", b =>
                {
                    b.HasOne("TestingSystem.Data.Entities.Answer", "Answer")
                        .WithMany("WebUserChooses")
                        .HasForeignKey("AnswerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TestingSystem.Data.Entities.Question", "Question")
                        .WithMany("WebUserChooses")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TestingSystem.Data.Entities.User", "WebUser")
                        .WithMany()
                        .HasForeignKey("WebUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Answer");

                    b.Navigation("Question");

                    b.Navigation("WebUser");
                });

            modelBuilder.Entity("TestingSystem.Data.Entities.Answer", b =>
                {
                    b.Navigation("WebUserChooses");
                });

            modelBuilder.Entity("TestingSystem.Data.Entities.Exam", b =>
                {
                    b.Navigation("Questions");

                    b.Navigation("Submissions");
                });

            modelBuilder.Entity("TestingSystem.Data.Entities.Question", b =>
                {
                    b.Navigation("Answers");

                    b.Navigation("WebUserChooses");
                });

            modelBuilder.Entity("TestingSystem.Data.Entities.User", b =>
                {
                    b.Navigation("Exams");

                    b.Navigation("Submissions");
                });

            modelBuilder.Entity("TestingSystem.Data.Entities.UserRole", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
