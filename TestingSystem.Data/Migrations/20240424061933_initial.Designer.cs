// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TestingSystem.Data.Db;

#nullable disable

namespace TestingSystem.Data.Migrations
{
    [DbContext(typeof(TestingSystemDbContext))]
    [Migration("20240424061933_initial")]
    partial class initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TestingSystem.Data.Entities.Answer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("Correct")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("SortOrder")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("Answers", (string)null);
                });

            modelBuilder.Entity("TestingSystem.Data.Entities.Category.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CategoryType")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Identifier")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ImageFileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<string>("LinkUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("NameNoneAscii")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.ToTable("Categories", (string)null);
                });

            modelBuilder.Entity("TestingSystem.Data.Entities.Category.CategoryTranslation", b =>
                {
                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LanguageCode")
                        .IsRequired()
                        .HasColumnType("varchar(5)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("LanguageCode");

                    b.ToTable("CategoryTranslation", (string)null);
                });

            modelBuilder.Entity("TestingSystem.Data.Entities.Course.Course", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AuthorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CourseImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CourseTeacherId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("FullTextSearch")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsHot")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("NameNonAscii")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<short>("ProductType")
                        .HasColumnType("smallint");

                    b.Property<short>("Status")
                        .HasColumnType("smallint");

                    b.Property<string>("Tags")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CourseTeacherId");

                    b.ToTable("Courses", (string)null);
                });

            modelBuilder.Entity("TestingSystem.Data.Entities.Course.CourseDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<int?>("SortOrder")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("CourseDetails", (string)null);
                });

            modelBuilder.Entity("TestingSystem.Data.Entities.Course.CourseDetailTranslation", b =>
                {
                    b.Property<Guid>("CourseDetailId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LanguageCode")
                        .IsRequired()
                        .HasColumnType("varchar(5)");

                    b.Property<string>("TabName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CourseDetailId");

                    b.HasIndex("CourseDetailId");

                    b.HasIndex("LanguageCode");

                    b.ToTable("CourseDetailTranslations", (string)null);
                });

            modelBuilder.Entity("TestingSystem.Data.Entities.Course.CourseTeacher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AvatarUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<int?>("SortOrder")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("CourseTeachers", (string)null);
                });

            modelBuilder.Entity("TestingSystem.Data.Entities.Course.CourseTeacherTranslation", b =>
                {
                    b.Property<Guid>("CourseTeacherId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LanguageCode")
                        .IsRequired()
                        .HasColumnType("varchar(5)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("University")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CourseTeacherId");

                    b.HasIndex("CourseTeacherId");

                    b.HasIndex("LanguageCode");

                    b.ToTable("CourseTeacherTranslations", (string)null);
                });

            modelBuilder.Entity("TestingSystem.Data.Entities.Course.CourseTranslation", b =>
                {
                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LanguageCode")
                        .IsRequired()
                        .HasColumnType("varchar(5)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumberOfAssignment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumberOfStudent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumberOfVideo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CourseId");

                    b.HasIndex("CourseId");

                    b.HasIndex("LanguageCode");

                    b.ToTable("CourseTranslations", (string)null);
                });

            modelBuilder.Entity("TestingSystem.Data.Entities.Exam", b =>
                {
                    b.Property<Guid>("ExamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsAutoGrade")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ModifiedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("ExamId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("ExamId");

                    b.ToTable("Exams", (string)null);
                });

            modelBuilder.Entity("TestingSystem.Data.Entities.LanguageTag", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.HasKey("Code");

                    b.ToTable("LanguageTags", (string)null);
                });

            modelBuilder.Entity("TestingSystem.Data.Entities.Lession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VideoUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("Lessions", (string)null);
                });

            modelBuilder.Entity("TestingSystem.Data.Entities.Question", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ExamId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Explanation")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool?>("IsSingleChoice")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("SortOrder")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ExamId");

                    b.HasIndex("Id");

                    b.ToTable("Questions", (string)null);
                });

            modelBuilder.Entity("TestingSystem.Data.Entities.Submission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ExamId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double?>("Score")
                        .HasColumnType("float");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("SubmittedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ExamId");

                    b.HasIndex("Id");

                    b.HasIndex("StudentId");

                    b.ToTable("Submissions", (string)null);
                });

            modelBuilder.Entity("TestingSystem.Data.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<short>("AccessFailedCount")
                        .HasColumnType("smallint");

                    b.Property<DateTime?>("BirthDay")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullTextSearch")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Gender")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("Email");

                    b.HasIndex("PhoneNumber");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserName");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("436af843-8340-4a53-a22c-4a94998393a9"),
                            AccessFailedCount = (short)0,
                            BirthDay = new DateTime(1990, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Created = new DateTime(2024, 4, 24, 6, 19, 32, 554, DateTimeKind.Utc).AddTicks(9656),
                            Deleted = false,
                            Email = "admin@example.com",
                            FirstName = "AdminFirstName",
                            FullName = "AdminFirstName AdminLastName",
                            FullTextSearch = "admin AdminFirstName AdminLastName admin@example.com 1234567890 Male",
                            Gender = "Male",
                            IsActive = true,
                            LastName = "AdminLastName",
                            Modified = new DateTime(2024, 4, 24, 6, 19, 32, 554, DateTimeKind.Utc).AddTicks(9659),
                            PasswordHash = new byte[] { 36, 162, 24, 53, 220, 160, 149, 182, 220, 2, 201, 234, 162, 184, 111, 19, 16, 172, 254, 203, 179, 13, 212, 236, 193, 98, 94, 142, 55, 98, 177, 95, 191, 202, 238, 126, 9, 41, 115, 42, 24, 26, 97, 227, 228, 148, 15, 10, 252, 39, 237, 156, 248, 44, 7, 113, 202, 213, 245, 104, 83, 113, 75, 119 },
                            PasswordSalt = new byte[] { 66, 46, 161, 74, 253, 166, 43, 138, 119, 162, 110, 128, 11, 157, 1, 9, 65, 204, 141, 47, 62, 252, 114, 10, 17, 30, 198, 25, 89, 172, 167, 160, 105, 134, 78, 209, 210, 156, 15, 232, 115, 21, 25, 19, 67, 14, 58, 218, 133, 93, 129, 70, 193, 52, 87, 158, 165, 43, 2, 140, 70, 66, 113, 87, 248, 175, 131, 157, 61, 146, 31, 111, 116, 234, 101, 204, 239, 15, 190, 227, 139, 250, 9, 131, 4, 21, 33, 61, 26, 64, 70, 60, 94, 225, 186, 144, 37, 120, 84, 117, 207, 199, 199, 93, 88, 250, 147, 160, 158, 108, 112, 165, 171, 58, 44, 91, 111, 8, 221, 173, 194, 208, 46, 159, 154, 216, 58, 27 },
                            PhoneNumber = "1234567890",
                            RoleId = new Guid("c907e6dc-d79f-4ad9-b7ef-4d16dd1c55ab"),
                            UserName = "admin"
                        },
                        new
                        {
                            Id = new Guid("2eb9b15a-0f3d-4e50-bfc1-bf7cf0e556b6"),
                            AccessFailedCount = (short)0,
                            BirthDay = new DateTime(1985, 5, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Created = new DateTime(2024, 4, 24, 6, 19, 32, 554, DateTimeKind.Utc).AddTicks(9700),
                            Deleted = false,
                            Email = "teacher@example.com",
                            FirstName = "TeacherFirstName",
                            FullName = "TeacherFirstName TeacherLastName",
                            FullTextSearch = "teacher TeacherFirstName TeacherLastName teacher@example.com 9876543210 Female",
                            Gender = "Female",
                            IsActive = true,
                            LastName = "TeacherLastName",
                            Modified = new DateTime(2024, 4, 24, 6, 19, 32, 554, DateTimeKind.Utc).AddTicks(9701),
                            PasswordHash = new byte[] { 214, 60, 15, 74, 47, 89, 96, 10, 113, 89, 233, 3, 236, 11, 145, 84, 94, 217, 58, 121, 184, 213, 97, 238, 179, 25, 84, 137, 198, 3, 83, 110, 249, 71, 208, 222, 130, 134, 33, 140, 99, 196, 8, 32, 196, 77, 118, 36, 113, 161, 49, 243, 109, 115, 47, 142, 62, 81, 72, 81, 55, 226, 218, 251 },
                            PasswordSalt = new byte[] { 208, 64, 35, 34, 29, 74, 203, 65, 162, 38, 12, 78, 30, 138, 36, 152, 202, 58, 166, 7, 99, 23, 236, 221, 177, 138, 209, 75, 15, 2, 199, 244, 93, 54, 33, 0, 231, 114, 32, 157, 137, 148, 167, 161, 236, 161, 137, 51, 111, 2, 173, 131, 122, 214, 21, 197, 175, 12, 148, 184, 4, 120, 47, 253, 1, 66, 20, 23, 39, 152, 241, 152, 215, 198, 113, 82, 95, 187, 103, 49, 171, 175, 205, 203, 54, 42, 182, 107, 24, 210, 210, 241, 24, 85, 152, 195, 154, 144, 247, 126, 33, 214, 199, 130, 249, 230, 154, 230, 112, 65, 238, 62, 71, 5, 249, 98, 113, 194, 44, 110, 65, 170, 182, 200, 37, 223, 142, 179 },
                            PhoneNumber = "9876543210",
                            RoleId = new Guid("97ce259e-27ef-45e1-822d-5c97b677dbb3"),
                            UserName = "teacher"
                        },
                        new
                        {
                            Id = new Guid("90efaef9-81a2-4d9a-a990-16bd6346f980"),
                            AccessFailedCount = (short)0,
                            BirthDay = new DateTime(2000, 10, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Created = new DateTime(2024, 4, 24, 6, 19, 32, 554, DateTimeKind.Utc).AddTicks(9735),
                            Deleted = false,
                            Email = "ronaldo@example.com",
                            FirstName = "Cristiano",
                            FullName = "Cristiano Ronaldo",
                            FullTextSearch = "user Cristiano Ronaldo ronaldo@example.com 5555555555 Male",
                            Gender = "Male",
                            IsActive = true,
                            LastName = "Ronaldo",
                            Modified = new DateTime(2024, 4, 24, 6, 19, 32, 554, DateTimeKind.Utc).AddTicks(9736),
                            PasswordHash = new byte[] { 87, 157, 185, 201, 221, 236, 229, 154, 242, 91, 214, 196, 14, 33, 36, 71, 103, 123, 58, 105, 88, 116, 241, 104, 53, 132, 130, 89, 40, 122, 33, 12, 123, 49, 27, 65, 194, 45, 198, 221, 217, 3, 54, 71, 86, 99, 214, 83, 252, 135, 213, 206, 201, 3, 153, 51, 66, 154, 236, 85, 160, 196, 157, 243 },
                            PasswordSalt = new byte[] { 205, 80, 131, 162, 72, 251, 29, 250, 208, 15, 183, 57, 242, 175, 241, 127, 119, 239, 86, 146, 237, 245, 143, 112, 152, 96, 23, 137, 136, 70, 72, 105, 252, 70, 241, 228, 36, 114, 164, 109, 221, 2, 13, 238, 184, 156, 6, 148, 36, 244, 32, 106, 20, 4, 139, 49, 141, 183, 27, 118, 169, 178, 56, 161, 128, 88, 114, 163, 118, 156, 221, 242, 238, 159, 89, 97, 45, 190, 126, 134, 95, 143, 154, 255, 147, 183, 110, 40, 114, 6, 90, 220, 129, 26, 93, 255, 230, 139, 209, 180, 47, 140, 99, 13, 63, 139, 47, 130, 82, 153, 231, 30, 81, 147, 72, 127, 7, 42, 95, 253, 197, 138, 33, 253, 193, 252, 149, 200 },
                            PhoneNumber = "5555555555",
                            RoleId = new Guid("5bbb11af-fb05-4d9b-aa52-a95529d0f85b"),
                            UserName = "user"
                        });
                });

            modelBuilder.Entity("TestingSystem.Data.Entities.UserRole", b =>
                {
                    b.Property<Guid>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            RoleId = new Guid("c907e6dc-d79f-4ad9-b7ef-4d16dd1c55ab"),
                            RoleName = "Admin"
                        },
                        new
                        {
                            RoleId = new Guid("97ce259e-27ef-45e1-822d-5c97b677dbb3"),
                            RoleName = "Teacher"
                        },
                        new
                        {
                            RoleId = new Guid("5bbb11af-fb05-4d9b-aa52-a95529d0f85b"),
                            RoleName = "User"
                        });
                });

            modelBuilder.Entity("TestingSystem.Data.Entities.WebUserChoose", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AnswerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AnswerText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("CorrectAnswer")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("WebUserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AnswerId");

                    b.HasIndex("QuestionId");

                    b.HasIndex("WebUserId");

                    b.ToTable("WebUserChooses", (string)null);
                });

            modelBuilder.Entity("TestingSystem.Data.Entities.Answer", b =>
                {
                    b.HasOne("TestingSystem.Data.Entities.Question", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("TestingSystem.Data.Entities.Category.CategoryTranslation", b =>
                {
                    b.HasOne("TestingSystem.Data.Entities.Category.Category", "Category")
                        .WithMany("CategoryTranslations")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TestingSystem.Data.Entities.LanguageTag", "Language")
                        .WithMany("CategoryTranslations")
                        .HasForeignKey("LanguageCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("TestingSystem.Data.Entities.Course.Course", b =>
                {
                    b.HasOne("TestingSystem.Data.Entities.User", "Author")
                        .WithMany("Courses")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("TestingSystem.Data.Entities.Category.Category", "Category")
                        .WithMany("Courses")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("TestingSystem.Data.Entities.Course.CourseTeacher", "CourseTeacher")
                        .WithMany("Courses")
                        .HasForeignKey("CourseTeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Category");

                    b.Navigation("CourseTeacher");
                });

            modelBuilder.Entity("TestingSystem.Data.Entities.Course.CourseDetail", b =>
                {
                    b.HasOne("TestingSystem.Data.Entities.Course.Course", "Course")
                        .WithMany("CourseDetails")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("TestingSystem.Data.Entities.Course.CourseDetailTranslation", b =>
                {
                    b.HasOne("TestingSystem.Data.Entities.Course.CourseDetail", "CourseDetail")
                        .WithMany("CourseDetailTranslations")
                        .HasForeignKey("CourseDetailId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TestingSystem.Data.Entities.LanguageTag", "Language")
                        .WithMany("CourseDetailTranslations")
                        .HasForeignKey("LanguageCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CourseDetail");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("TestingSystem.Data.Entities.Course.CourseTeacherTranslation", b =>
                {
                    b.HasOne("TestingSystem.Data.Entities.Course.CourseTeacher", "CourseTeacher")
                        .WithMany("CourseTeacherTranslations")
                        .HasForeignKey("CourseTeacherId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TestingSystem.Data.Entities.LanguageTag", "Language")
                        .WithMany("CourseTeacherTranslations")
                        .HasForeignKey("LanguageCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CourseTeacher");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("TestingSystem.Data.Entities.Course.CourseTranslation", b =>
                {
                    b.HasOne("TestingSystem.Data.Entities.Course.Course", "Course")
                        .WithMany("CourseTranslations")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TestingSystem.Data.Entities.LanguageTag", "Language")
                        .WithMany("CourseTranslations")
                        .HasForeignKey("LanguageCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("TestingSystem.Data.Entities.Exam", b =>
                {
                    b.HasOne("TestingSystem.Data.Entities.User", "Teacher")
                        .WithMany("Exams")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("TestingSystem.Data.Entities.Lession", b =>
                {
                    b.HasOne("TestingSystem.Data.Entities.Course.Course", "Course")
                        .WithMany("Lessions")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("TestingSystem.Data.Entities.Question", b =>
                {
                    b.HasOne("TestingSystem.Data.Entities.Exam", "Exam")
                        .WithMany("Questions")
                        .HasForeignKey("ExamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exam");
                });

            modelBuilder.Entity("TestingSystem.Data.Entities.Submission", b =>
                {
                    b.HasOne("TestingSystem.Data.Entities.Exam", "Exam")
                        .WithMany("Submissions")
                        .HasForeignKey("ExamId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TestingSystem.Data.Entities.User", "Student")
                        .WithMany("Submissions")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Exam");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("TestingSystem.Data.Entities.User", b =>
                {
                    b.HasOne("TestingSystem.Data.Entities.UserRole", "UserRole")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("UserRole");
                });

            modelBuilder.Entity("TestingSystem.Data.Entities.WebUserChoose", b =>
                {
                    b.HasOne("TestingSystem.Data.Entities.Answer", "Answer")
                        .WithMany("WebUserChooses")
                        .HasForeignKey("AnswerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TestingSystem.Data.Entities.Question", "Question")
                        .WithMany("WebUserChooses")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TestingSystem.Data.Entities.User", "WebUser")
                        .WithMany()
                        .HasForeignKey("WebUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Answer");

                    b.Navigation("Question");

                    b.Navigation("WebUser");
                });

            modelBuilder.Entity("TestingSystem.Data.Entities.Answer", b =>
                {
                    b.Navigation("WebUserChooses");
                });

            modelBuilder.Entity("TestingSystem.Data.Entities.Category.Category", b =>
                {
                    b.Navigation("CategoryTranslations");

                    b.Navigation("Courses");
                });

            modelBuilder.Entity("TestingSystem.Data.Entities.Course.Course", b =>
                {
                    b.Navigation("CourseDetails");

                    b.Navigation("CourseTranslations");

                    b.Navigation("Lessions");
                });

            modelBuilder.Entity("TestingSystem.Data.Entities.Course.CourseDetail", b =>
                {
                    b.Navigation("CourseDetailTranslations");
                });

            modelBuilder.Entity("TestingSystem.Data.Entities.Course.CourseTeacher", b =>
                {
                    b.Navigation("CourseTeacherTranslations");

                    b.Navigation("Courses");
                });

            modelBuilder.Entity("TestingSystem.Data.Entities.Exam", b =>
                {
                    b.Navigation("Questions");

                    b.Navigation("Submissions");
                });

            modelBuilder.Entity("TestingSystem.Data.Entities.LanguageTag", b =>
                {
                    b.Navigation("CategoryTranslations");

                    b.Navigation("CourseDetailTranslations");

                    b.Navigation("CourseTeacherTranslations");

                    b.Navigation("CourseTranslations");
                });

            modelBuilder.Entity("TestingSystem.Data.Entities.Question", b =>
                {
                    b.Navigation("Answers");

                    b.Navigation("WebUserChooses");
                });

            modelBuilder.Entity("TestingSystem.Data.Entities.User", b =>
                {
                    b.Navigation("Courses");

                    b.Navigation("Exams");

                    b.Navigation("Submissions");
                });

            modelBuilder.Entity("TestingSystem.Data.Entities.UserRole", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
