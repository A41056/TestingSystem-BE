// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TestingSystem.Data.Db;

#nullable disable

namespace TestingSystem.Data.Migrations
{
    [DbContext(typeof(TestingSystemDbContext))]
    [Migration("20240426085123_fix_translation_key")]
    partial class fix_translation_key
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TestingSystem.Data.Entities.Answer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("Correct")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("SortOrder")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("Answers", (string)null);
                });

            modelBuilder.Entity("TestingSystem.Data.Entities.Category.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("NameNoneAscii")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.ToTable("Categories", (string)null);
                });

            modelBuilder.Entity("TestingSystem.Data.Entities.Category.CategoryTranslation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LanguageCode")
                        .IsRequired()
                        .HasColumnType("varchar(5)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("LanguageCode");

                    b.ToTable("CategoryTranslation", (string)null);
                });

            modelBuilder.Entity("TestingSystem.Data.Entities.Course.Course", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AuthorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CourseImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("FullTextSearch")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsHot")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("NameNonAscii")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<short>("ProductType")
                        .HasColumnType("smallint");

                    b.Property<short>("Status")
                        .HasColumnType("smallint");

                    b.Property<string>("Tags")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("Id");

                    b.ToTable("Courses", (string)null);
                });

            modelBuilder.Entity("TestingSystem.Data.Entities.Course.CourseDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<int?>("SortOrder")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("CourseDetails", (string)null);
                });

            modelBuilder.Entity("TestingSystem.Data.Entities.Course.CourseDetailTranslation", b =>
                {
                    b.Property<Guid>("CourseDetailId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LanguageCode")
                        .IsRequired()
                        .HasColumnType("varchar(5)");

                    b.Property<string>("TabName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CourseDetailId");

                    b.HasIndex("CourseDetailId");

                    b.HasIndex("LanguageCode");

                    b.ToTable("CourseDetailTranslations", (string)null);
                });

            modelBuilder.Entity("TestingSystem.Data.Entities.Course.CourseTeacher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AvatarUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<int?>("SortOrder")
                        .HasColumnType("int");

                    b.Property<Guid>("TeacherId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("Id");

                    b.HasIndex("TeacherId");

                    b.ToTable("CourseTeachers", (string)null);
                });

            modelBuilder.Entity("TestingSystem.Data.Entities.Course.CourseTeacherTranslation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CourseTeacherId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LanguageCode")
                        .IsRequired()
                        .HasColumnType("varchar(5)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("University")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CourseTeacherId");

                    b.HasIndex("Id");

                    b.HasIndex("LanguageCode");

                    b.ToTable("CourseTeacherTranslations", (string)null);
                });

            modelBuilder.Entity("TestingSystem.Data.Entities.Course.CourseTranslation", b =>
                {
                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LanguageCode")
                        .IsRequired()
                        .HasColumnType("varchar(5)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumberOfAssignment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumberOfStudent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumberOfVideo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CourseId");

                    b.HasIndex("CourseId");

                    b.HasIndex("LanguageCode");

                    b.ToTable("CourseTranslations", (string)null);
                });

            modelBuilder.Entity("TestingSystem.Data.Entities.Exam", b =>
                {
                    b.Property<Guid>("ExamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsAutoGrade")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ModifiedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("ExamId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("ExamId");

                    b.ToTable("Exams", (string)null);
                });

            modelBuilder.Entity("TestingSystem.Data.Entities.LanguageTag", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.HasKey("Code");

                    b.ToTable("LanguageTags", (string)null);

                    b.HasData(
                        new
                        {
                            Code = "vi-VN",
                            Created = new DateTime(2024, 4, 26, 8, 51, 22, 738, DateTimeKind.Utc).AddTicks(684),
                            IsActive = true,
                            IsDefault = true,
                            Name = "VietNam",
                            SortOrder = 0
                        },
                        new
                        {
                            Code = "en-EN",
                            Created = new DateTime(2024, 4, 26, 8, 51, 22, 738, DateTimeKind.Utc).AddTicks(688),
                            IsActive = true,
                            IsDefault = false,
                            Name = "English",
                            SortOrder = 1
                        },
                        new
                        {
                            Code = "ru-RU",
                            Created = new DateTime(2024, 4, 26, 8, 51, 22, 738, DateTimeKind.Utc).AddTicks(692),
                            IsActive = true,
                            IsDefault = false,
                            Name = "Russia",
                            SortOrder = 2
                        });
                });

            modelBuilder.Entity("TestingSystem.Data.Entities.Lession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VideoUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("Lessions", (string)null);
                });

            modelBuilder.Entity("TestingSystem.Data.Entities.LessionTranslation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LanguageCode")
                        .IsRequired()
                        .HasColumnType("varchar(5)");

                    b.Property<Guid>("LessionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("LanguageCode");

                    b.HasIndex("LessionId");

                    b.ToTable("LessionTranslations", (string)null);
                });

            modelBuilder.Entity("TestingSystem.Data.Entities.Question", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ExamId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Explanation")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool?>("IsSingleChoice")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("SortOrder")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ExamId");

                    b.HasIndex("Id");

                    b.ToTable("Questions", (string)null);
                });

            modelBuilder.Entity("TestingSystem.Data.Entities.Submission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ExamId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double?>("Score")
                        .HasColumnType("float");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("SubmittedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ExamId");

                    b.HasIndex("Id");

                    b.HasIndex("StudentId");

                    b.ToTable("Submissions", (string)null);
                });

            modelBuilder.Entity("TestingSystem.Data.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<short>("AccessFailedCount")
                        .HasColumnType("smallint");

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("BirthDay")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullTextSearch")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Gender")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("Email");

                    b.HasIndex("PhoneNumber");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserName");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("4ed92470-53ef-4ff0-a03b-e0e97addbe79"),
                            AccessFailedCount = (short)0,
                            BirthDay = new DateTime(1990, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Created = new DateTime(2024, 4, 26, 8, 51, 22, 738, DateTimeKind.Utc).AddTicks(456),
                            Deleted = false,
                            Email = "admin@example.com",
                            FirstName = "AdminFirstName",
                            FullName = "AdminFirstName AdminLastName",
                            FullTextSearch = "admin AdminFirstName AdminLastName admin@example.com 1234567890 Male",
                            Gender = "Male",
                            IsActive = true,
                            LastName = "AdminLastName",
                            Modified = new DateTime(2024, 4, 26, 8, 51, 22, 738, DateTimeKind.Utc).AddTicks(460),
                            PasswordHash = new byte[] { 3, 132, 166, 31, 240, 166, 207, 79, 157, 204, 248, 240, 53, 153, 187, 192, 142, 228, 23, 221, 116, 103, 49, 71, 132, 65, 181, 37, 200, 136, 117, 56, 210, 39, 94, 237, 233, 149, 157, 42, 121, 186, 64, 250, 148, 132, 229, 86, 178, 6, 169, 249, 15, 105, 85, 238, 111, 52, 18, 46, 26, 107, 90, 137 },
                            PasswordSalt = new byte[] { 189, 22, 96, 150, 233, 55, 151, 138, 57, 89, 167, 141, 126, 206, 84, 238, 191, 80, 74, 146, 172, 174, 123, 54, 103, 201, 160, 168, 148, 192, 129, 110, 237, 191, 19, 24, 174, 180, 168, 4, 195, 169, 185, 164, 131, 16, 161, 215, 60, 39, 72, 46, 188, 205, 34, 255, 210, 23, 60, 108, 145, 204, 204, 233, 81, 66, 228, 193, 159, 168, 246, 146, 5, 164, 252, 197, 73, 113, 62, 86, 255, 251, 218, 46, 214, 53, 62, 70, 184, 2, 236, 115, 16, 193, 87, 101, 145, 23, 181, 237, 230, 33, 174, 108, 196, 130, 226, 50, 103, 178, 189, 69, 206, 121, 140, 206, 146, 183, 191, 82, 0, 133, 137, 81, 220, 62, 143, 30 },
                            PhoneNumber = "1234567890",
                            RoleId = new Guid("00511f34-2fa2-4246-b0e8-1c4eab19c2f3"),
                            UserName = "admin"
                        },
                        new
                        {
                            Id = new Guid("ae6522d1-eeb3-4523-9a8e-d4da40a041ca"),
                            AccessFailedCount = (short)0,
                            BirthDay = new DateTime(1985, 5, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Created = new DateTime(2024, 4, 26, 8, 51, 22, 738, DateTimeKind.Utc).AddTicks(542),
                            Deleted = false,
                            Email = "teacher@example.com",
                            FirstName = "TeacherFirstName",
                            FullName = "TeacherFirstName TeacherLastName",
                            FullTextSearch = "teacher TeacherFirstName TeacherLastName teacher@example.com 9876543210 Female",
                            Gender = "Female",
                            IsActive = true,
                            LastName = "TeacherLastName",
                            Modified = new DateTime(2024, 4, 26, 8, 51, 22, 738, DateTimeKind.Utc).AddTicks(543),
                            PasswordHash = new byte[] { 234, 4, 66, 197, 6, 34, 102, 156, 96, 245, 140, 196, 205, 22, 54, 206, 63, 149, 41, 229, 164, 188, 42, 156, 220, 100, 103, 185, 99, 95, 48, 198, 125, 220, 195, 26, 53, 15, 105, 112, 190, 248, 93, 249, 26, 219, 87, 169, 133, 152, 220, 172, 9, 139, 24, 232, 103, 121, 250, 122, 104, 169, 235, 115 },
                            PasswordSalt = new byte[] { 24, 158, 232, 128, 25, 149, 149, 83, 20, 143, 214, 123, 244, 149, 137, 143, 184, 56, 111, 174, 102, 198, 95, 210, 0, 167, 243, 162, 67, 16, 223, 11, 35, 212, 76, 222, 228, 15, 183, 149, 170, 255, 61, 133, 209, 92, 120, 141, 160, 100, 86, 162, 76, 207, 207, 160, 224, 13, 243, 76, 49, 78, 203, 9, 151, 92, 142, 55, 236, 100, 71, 63, 14, 31, 103, 128, 235, 86, 19, 63, 134, 185, 231, 54, 144, 156, 28, 81, 119, 207, 123, 134, 99, 172, 125, 97, 101, 121, 214, 254, 126, 137, 112, 36, 25, 74, 74, 66, 161, 94, 0, 113, 179, 73, 48, 254, 202, 73, 6, 96, 15, 208, 245, 90, 63, 68, 118, 184 },
                            PhoneNumber = "9876543210",
                            RoleId = new Guid("c8986eff-c950-4f9f-892a-6e97b4727981"),
                            UserName = "teacher"
                        },
                        new
                        {
                            Id = new Guid("bf0b97be-a776-4a53-a3e3-33233ad4b8e5"),
                            AccessFailedCount = (short)0,
                            BirthDay = new DateTime(2000, 10, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Created = new DateTime(2024, 4, 26, 8, 51, 22, 738, DateTimeKind.Utc).AddTicks(614),
                            Deleted = false,
                            Email = "ronaldo@example.com",
                            FirstName = "Cristiano",
                            FullName = "Cristiano Ronaldo",
                            FullTextSearch = "user Cristiano Ronaldo ronaldo@example.com 5555555555 Male",
                            Gender = "Male",
                            IsActive = true,
                            LastName = "Ronaldo",
                            Modified = new DateTime(2024, 4, 26, 8, 51, 22, 738, DateTimeKind.Utc).AddTicks(615),
                            PasswordHash = new byte[] { 77, 96, 180, 101, 42, 100, 220, 151, 214, 160, 126, 88, 20, 210, 174, 232, 52, 202, 245, 190, 116, 71, 125, 74, 157, 89, 212, 121, 173, 242, 75, 184, 55, 169, 54, 51, 254, 26, 208, 27, 83, 241, 56, 3, 91, 87, 204, 125, 201, 58, 166, 68, 124, 154, 112, 126, 245, 179, 12, 188, 200, 151, 91, 92 },
                            PasswordSalt = new byte[] { 80, 63, 134, 101, 164, 119, 191, 57, 156, 129, 139, 181, 47, 79, 6, 174, 77, 4, 94, 41, 185, 77, 114, 118, 236, 194, 189, 94, 116, 138, 224, 74, 12, 248, 35, 144, 61, 158, 180, 231, 69, 255, 5, 176, 244, 54, 222, 230, 215, 238, 53, 22, 184, 228, 30, 140, 239, 244, 35, 194, 71, 36, 14, 57, 254, 247, 90, 173, 164, 37, 232, 221, 55, 60, 117, 194, 228, 127, 80, 154, 158, 35, 24, 152, 209, 130, 234, 229, 62, 188, 111, 251, 105, 230, 69, 51, 141, 77, 175, 12, 193, 151, 208, 140, 137, 223, 171, 241, 150, 52, 121, 192, 116, 77, 209, 132, 200, 20, 252, 67, 162, 127, 187, 43, 44, 200, 189, 141 },
                            PhoneNumber = "5555555555",
                            RoleId = new Guid("543504a5-6d00-4261-b39a-1a72ddda020f"),
                            UserName = "user"
                        });
                });

            modelBuilder.Entity("TestingSystem.Data.Entities.UserRole", b =>
                {
                    b.Property<Guid>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            RoleId = new Guid("00511f34-2fa2-4246-b0e8-1c4eab19c2f3"),
                            RoleName = "Admin"
                        },
                        new
                        {
                            RoleId = new Guid("c8986eff-c950-4f9f-892a-6e97b4727981"),
                            RoleName = "Teacher"
                        },
                        new
                        {
                            RoleId = new Guid("543504a5-6d00-4261-b39a-1a72ddda020f"),
                            RoleName = "User"
                        });
                });

            modelBuilder.Entity("TestingSystem.Data.Entities.WebUserChoose", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AnswerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AnswerText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("CorrectAnswer")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("WebUserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AnswerId");

                    b.HasIndex("QuestionId");

                    b.HasIndex("WebUserId");

                    b.ToTable("WebUserChooses", (string)null);
                });

            modelBuilder.Entity("TestingSystem.Data.Entities.Answer", b =>
                {
                    b.HasOne("TestingSystem.Data.Entities.Question", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("TestingSystem.Data.Entities.Category.CategoryTranslation", b =>
                {
                    b.HasOne("TestingSystem.Data.Entities.Category.Category", "Category")
                        .WithMany("CategoryTranslations")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TestingSystem.Data.Entities.LanguageTag", "Language")
                        .WithMany("CategoryTranslations")
                        .HasForeignKey("LanguageCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("TestingSystem.Data.Entities.Course.Course", b =>
                {
                    b.HasOne("TestingSystem.Data.Entities.User", "Author")
                        .WithMany("Courses")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("TestingSystem.Data.Entities.Category.Category", "Category")
                        .WithMany("Courses")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Author");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("TestingSystem.Data.Entities.Course.CourseDetail", b =>
                {
                    b.HasOne("TestingSystem.Data.Entities.Course.Course", "Course")
                        .WithMany("CourseDetails")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("TestingSystem.Data.Entities.Course.CourseDetailTranslation", b =>
                {
                    b.HasOne("TestingSystem.Data.Entities.Course.CourseDetail", "CourseDetail")
                        .WithMany("CourseDetailTranslations")
                        .HasForeignKey("CourseDetailId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TestingSystem.Data.Entities.LanguageTag", "Language")
                        .WithMany("CourseDetailTranslations")
                        .HasForeignKey("LanguageCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CourseDetail");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("TestingSystem.Data.Entities.Course.CourseTeacher", b =>
                {
                    b.HasOne("TestingSystem.Data.Entities.Course.Course", "Course")
                        .WithMany("CourseTeachers")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TestingSystem.Data.Entities.User", "Teacher")
                        .WithMany("CourseTeachers")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("TestingSystem.Data.Entities.Course.CourseTeacherTranslation", b =>
                {
                    b.HasOne("TestingSystem.Data.Entities.Course.CourseTeacher", "CourseTeacher")
                        .WithMany("CourseTeacherTranslations")
                        .HasForeignKey("CourseTeacherId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TestingSystem.Data.Entities.LanguageTag", "Language")
                        .WithMany("CourseTeacherTranslations")
                        .HasForeignKey("LanguageCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CourseTeacher");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("TestingSystem.Data.Entities.Course.CourseTranslation", b =>
                {
                    b.HasOne("TestingSystem.Data.Entities.Course.Course", "Course")
                        .WithMany("CourseTranslations")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TestingSystem.Data.Entities.LanguageTag", "Language")
                        .WithMany("CourseTranslations")
                        .HasForeignKey("LanguageCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("TestingSystem.Data.Entities.Exam", b =>
                {
                    b.HasOne("TestingSystem.Data.Entities.User", "Teacher")
                        .WithMany("Exams")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("TestingSystem.Data.Entities.Lession", b =>
                {
                    b.HasOne("TestingSystem.Data.Entities.Course.Course", "Course")
                        .WithMany("Lessions")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("TestingSystem.Data.Entities.LessionTranslation", b =>
                {
                    b.HasOne("TestingSystem.Data.Entities.LanguageTag", "Language")
                        .WithMany("LessionTranslations")
                        .HasForeignKey("LanguageCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TestingSystem.Data.Entities.Lession", "Lession")
                        .WithMany("LessionTranslations")
                        .HasForeignKey("LessionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("Lession");
                });

            modelBuilder.Entity("TestingSystem.Data.Entities.Question", b =>
                {
                    b.HasOne("TestingSystem.Data.Entities.Exam", "Exam")
                        .WithMany("Questions")
                        .HasForeignKey("ExamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exam");
                });

            modelBuilder.Entity("TestingSystem.Data.Entities.Submission", b =>
                {
                    b.HasOne("TestingSystem.Data.Entities.Exam", "Exam")
                        .WithMany("Submissions")
                        .HasForeignKey("ExamId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TestingSystem.Data.Entities.User", "Student")
                        .WithMany("Submissions")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Exam");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("TestingSystem.Data.Entities.User", b =>
                {
                    b.HasOne("TestingSystem.Data.Entities.UserRole", "UserRole")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("UserRole");
                });

            modelBuilder.Entity("TestingSystem.Data.Entities.WebUserChoose", b =>
                {
                    b.HasOne("TestingSystem.Data.Entities.Answer", "Answer")
                        .WithMany("WebUserChooses")
                        .HasForeignKey("AnswerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TestingSystem.Data.Entities.Question", "Question")
                        .WithMany("WebUserChooses")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TestingSystem.Data.Entities.User", "WebUser")
                        .WithMany()
                        .HasForeignKey("WebUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Answer");

                    b.Navigation("Question");

                    b.Navigation("WebUser");
                });

            modelBuilder.Entity("TestingSystem.Data.Entities.Answer", b =>
                {
                    b.Navigation("WebUserChooses");
                });

            modelBuilder.Entity("TestingSystem.Data.Entities.Category.Category", b =>
                {
                    b.Navigation("CategoryTranslations");

                    b.Navigation("Courses");
                });

            modelBuilder.Entity("TestingSystem.Data.Entities.Course.Course", b =>
                {
                    b.Navigation("CourseDetails");

                    b.Navigation("CourseTeachers");

                    b.Navigation("CourseTranslations");

                    b.Navigation("Lessions");
                });

            modelBuilder.Entity("TestingSystem.Data.Entities.Course.CourseDetail", b =>
                {
                    b.Navigation("CourseDetailTranslations");
                });

            modelBuilder.Entity("TestingSystem.Data.Entities.Course.CourseTeacher", b =>
                {
                    b.Navigation("CourseTeacherTranslations");
                });

            modelBuilder.Entity("TestingSystem.Data.Entities.Exam", b =>
                {
                    b.Navigation("Questions");

                    b.Navigation("Submissions");
                });

            modelBuilder.Entity("TestingSystem.Data.Entities.LanguageTag", b =>
                {
                    b.Navigation("CategoryTranslations");

                    b.Navigation("CourseDetailTranslations");

                    b.Navigation("CourseTeacherTranslations");

                    b.Navigation("CourseTranslations");

                    b.Navigation("LessionTranslations");
                });

            modelBuilder.Entity("TestingSystem.Data.Entities.Lession", b =>
                {
                    b.Navigation("LessionTranslations");
                });

            modelBuilder.Entity("TestingSystem.Data.Entities.Question", b =>
                {
                    b.Navigation("Answers");

                    b.Navigation("WebUserChooses");
                });

            modelBuilder.Entity("TestingSystem.Data.Entities.User", b =>
                {
                    b.Navigation("CourseTeachers");

                    b.Navigation("Courses");

                    b.Navigation("Exams");

                    b.Navigation("Submissions");
                });

            modelBuilder.Entity("TestingSystem.Data.Entities.UserRole", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
