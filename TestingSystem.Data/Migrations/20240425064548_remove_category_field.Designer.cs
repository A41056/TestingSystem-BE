// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TestingSystem.Data.Db;

#nullable disable

namespace TestingSystem.Data.Migrations
{
    [DbContext(typeof(TestingSystemDbContext))]
    [Migration("20240425064548_remove_category_field")]
    partial class remove_category_field
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TestingSystem.Data.Entities.Answer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("Correct")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("SortOrder")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("Answers", (string)null);
                });

            modelBuilder.Entity("TestingSystem.Data.Entities.Category.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("NameNoneAscii")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.ToTable("Categories", (string)null);
                });

            modelBuilder.Entity("TestingSystem.Data.Entities.Category.CategoryTranslation", b =>
                {
                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LanguageCode")
                        .IsRequired()
                        .HasColumnType("varchar(5)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("LanguageCode");

                    b.ToTable("CategoryTranslation", (string)null);
                });

            modelBuilder.Entity("TestingSystem.Data.Entities.Course.Course", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AuthorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CourseImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CourseTeacherId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("FullTextSearch")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsHot")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("NameNonAscii")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<short>("ProductType")
                        .HasColumnType("smallint");

                    b.Property<short>("Status")
                        .HasColumnType("smallint");

                    b.Property<string>("Tags")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CourseTeacherId");

                    b.ToTable("Courses", (string)null);
                });

            modelBuilder.Entity("TestingSystem.Data.Entities.Course.CourseDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<int?>("SortOrder")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("CourseDetails", (string)null);
                });

            modelBuilder.Entity("TestingSystem.Data.Entities.Course.CourseDetailTranslation", b =>
                {
                    b.Property<Guid>("CourseDetailId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LanguageCode")
                        .IsRequired()
                        .HasColumnType("varchar(5)");

                    b.Property<string>("TabName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CourseDetailId");

                    b.HasIndex("CourseDetailId");

                    b.HasIndex("LanguageCode");

                    b.ToTable("CourseDetailTranslations", (string)null);
                });

            modelBuilder.Entity("TestingSystem.Data.Entities.Course.CourseTeacher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AvatarUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<int?>("SortOrder")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("CourseTeachers", (string)null);
                });

            modelBuilder.Entity("TestingSystem.Data.Entities.Course.CourseTeacherTranslation", b =>
                {
                    b.Property<Guid>("CourseTeacherId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LanguageCode")
                        .IsRequired()
                        .HasColumnType("varchar(5)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("University")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CourseTeacherId");

                    b.HasIndex("CourseTeacherId");

                    b.HasIndex("LanguageCode");

                    b.ToTable("CourseTeacherTranslations", (string)null);
                });

            modelBuilder.Entity("TestingSystem.Data.Entities.Course.CourseTranslation", b =>
                {
                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LanguageCode")
                        .IsRequired()
                        .HasColumnType("varchar(5)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumberOfAssignment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumberOfStudent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumberOfVideo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CourseId");

                    b.HasIndex("CourseId");

                    b.HasIndex("LanguageCode");

                    b.ToTable("CourseTranslations", (string)null);
                });

            modelBuilder.Entity("TestingSystem.Data.Entities.Exam", b =>
                {
                    b.Property<Guid>("ExamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsAutoGrade")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ModifiedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("ExamId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("ExamId");

                    b.ToTable("Exams", (string)null);
                });

            modelBuilder.Entity("TestingSystem.Data.Entities.LanguageTag", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.HasKey("Code");

                    b.ToTable("LanguageTags", (string)null);

                    b.HasData(
                        new
                        {
                            Code = "vi-VN",
                            Created = new DateTime(2024, 4, 25, 6, 45, 48, 93, DateTimeKind.Utc).AddTicks(4182),
                            IsActive = true,
                            IsDefault = true,
                            Name = "VietNam",
                            SortOrder = 0
                        },
                        new
                        {
                            Code = "en-EN",
                            Created = new DateTime(2024, 4, 25, 6, 45, 48, 93, DateTimeKind.Utc).AddTicks(4184),
                            IsActive = true,
                            IsDefault = false,
                            Name = "English",
                            SortOrder = 1
                        },
                        new
                        {
                            Code = "ru-RU",
                            Created = new DateTime(2024, 4, 25, 6, 45, 48, 93, DateTimeKind.Utc).AddTicks(4186),
                            IsActive = true,
                            IsDefault = false,
                            Name = "Russia",
                            SortOrder = 2
                        });
                });

            modelBuilder.Entity("TestingSystem.Data.Entities.Lession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VideoUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("Lessions", (string)null);
                });

            modelBuilder.Entity("TestingSystem.Data.Entities.LessionTranslation", b =>
                {
                    b.Property<Guid>("LessionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LanguageCode")
                        .IsRequired()
                        .HasColumnType("varchar(5)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LessionId");

                    b.HasIndex("LanguageCode");

                    b.HasIndex("LessionId");

                    b.ToTable("LessionTranslations", (string)null);
                });

            modelBuilder.Entity("TestingSystem.Data.Entities.Question", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ExamId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Explanation")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool?>("IsSingleChoice")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("SortOrder")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ExamId");

                    b.HasIndex("Id");

                    b.ToTable("Questions", (string)null);
                });

            modelBuilder.Entity("TestingSystem.Data.Entities.Submission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ExamId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double?>("Score")
                        .HasColumnType("float");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("SubmittedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ExamId");

                    b.HasIndex("Id");

                    b.HasIndex("StudentId");

                    b.ToTable("Submissions", (string)null);
                });

            modelBuilder.Entity("TestingSystem.Data.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<short>("AccessFailedCount")
                        .HasColumnType("smallint");

                    b.Property<DateTime?>("BirthDay")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullTextSearch")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Gender")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("Email");

                    b.HasIndex("PhoneNumber");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserName");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("122a18af-d2c9-4752-a4ad-8e75fac0a024"),
                            AccessFailedCount = (short)0,
                            BirthDay = new DateTime(1990, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Created = new DateTime(2024, 4, 25, 6, 45, 48, 93, DateTimeKind.Utc).AddTicks(4050),
                            Deleted = false,
                            Email = "admin@example.com",
                            FirstName = "AdminFirstName",
                            FullName = "AdminFirstName AdminLastName",
                            FullTextSearch = "admin AdminFirstName AdminLastName admin@example.com 1234567890 Male",
                            Gender = "Male",
                            IsActive = true,
                            LastName = "AdminLastName",
                            Modified = new DateTime(2024, 4, 25, 6, 45, 48, 93, DateTimeKind.Utc).AddTicks(4053),
                            PasswordHash = new byte[] { 80, 148, 207, 158, 169, 69, 237, 150, 195, 62, 192, 163, 233, 149, 9, 37, 56, 175, 175, 228, 69, 246, 96, 58, 13, 22, 59, 238, 185, 71, 91, 24, 149, 121, 102, 24, 144, 13, 3, 150, 206, 159, 207, 15, 115, 168, 68, 50, 90, 192, 169, 133, 85, 107, 80, 10, 100, 97, 2, 207, 238, 34, 177, 63 },
                            PasswordSalt = new byte[] { 100, 161, 9, 122, 250, 195, 154, 68, 221, 124, 121, 198, 230, 222, 109, 211, 143, 28, 18, 47, 164, 164, 58, 82, 1, 40, 94, 31, 131, 200, 175, 141, 202, 214, 114, 232, 72, 102, 166, 252, 134, 148, 81, 109, 190, 97, 80, 58, 215, 245, 211, 139, 188, 78, 212, 183, 191, 183, 168, 49, 208, 152, 98, 71, 110, 116, 19, 210, 12, 144, 165, 169, 216, 164, 178, 250, 20, 86, 9, 0, 128, 78, 172, 2, 249, 247, 19, 102, 49, 50, 8, 151, 161, 252, 173, 54, 37, 175, 202, 34, 66, 228, 64, 84, 114, 143, 222, 254, 164, 236, 185, 243, 135, 99, 76, 20, 68, 223, 51, 179, 149, 120, 145, 229, 33, 0, 15, 108 },
                            PhoneNumber = "1234567890",
                            RoleId = new Guid("e22bb0c2-ff66-42e7-b52d-cbca29875342"),
                            UserName = "admin"
                        },
                        new
                        {
                            Id = new Guid("e0e2248d-07da-4ee0-accf-a5ef51908a98"),
                            AccessFailedCount = (short)0,
                            BirthDay = new DateTime(1985, 5, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Created = new DateTime(2024, 4, 25, 6, 45, 48, 93, DateTimeKind.Utc).AddTicks(4101),
                            Deleted = false,
                            Email = "teacher@example.com",
                            FirstName = "TeacherFirstName",
                            FullName = "TeacherFirstName TeacherLastName",
                            FullTextSearch = "teacher TeacherFirstName TeacherLastName teacher@example.com 9876543210 Female",
                            Gender = "Female",
                            IsActive = true,
                            LastName = "TeacherLastName",
                            Modified = new DateTime(2024, 4, 25, 6, 45, 48, 93, DateTimeKind.Utc).AddTicks(4101),
                            PasswordHash = new byte[] { 52, 173, 84, 211, 228, 191, 46, 186, 153, 134, 63, 70, 94, 12, 154, 155, 109, 117, 243, 48, 181, 217, 15, 8, 248, 131, 154, 235, 111, 56, 24, 20, 30, 181, 224, 118, 189, 249, 78, 194, 217, 61, 96, 215, 161, 1, 242, 117, 60, 205, 176, 12, 131, 36, 235, 136, 15, 173, 141, 216, 75, 95, 177, 31 },
                            PasswordSalt = new byte[] { 144, 175, 67, 59, 151, 216, 13, 75, 61, 119, 24, 70, 211, 47, 17, 2, 153, 133, 211, 143, 240, 17, 230, 253, 15, 184, 50, 144, 135, 80, 3, 190, 187, 112, 180, 63, 222, 196, 178, 139, 78, 132, 110, 59, 117, 24, 59, 33, 56, 54, 145, 38, 201, 89, 87, 240, 209, 154, 4, 90, 218, 56, 28, 231, 224, 49, 62, 175, 138, 66, 78, 18, 95, 107, 59, 124, 245, 23, 192, 145, 58, 29, 141, 165, 125, 12, 35, 231, 213, 27, 225, 12, 0, 207, 118, 4, 214, 199, 84, 241, 55, 3, 122, 55, 80, 155, 44, 68, 112, 100, 84, 199, 194, 46, 152, 186, 221, 142, 35, 120, 183, 45, 42, 83, 78, 219, 64, 160 },
                            PhoneNumber = "9876543210",
                            RoleId = new Guid("c2cbf9f8-152a-41af-a167-19c58f4ec82b"),
                            UserName = "teacher"
                        },
                        new
                        {
                            Id = new Guid("0e274f1b-803f-4150-8f75-1240cf67335b"),
                            AccessFailedCount = (short)0,
                            BirthDay = new DateTime(2000, 10, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Created = new DateTime(2024, 4, 25, 6, 45, 48, 93, DateTimeKind.Utc).AddTicks(4139),
                            Deleted = false,
                            Email = "ronaldo@example.com",
                            FirstName = "Cristiano",
                            FullName = "Cristiano Ronaldo",
                            FullTextSearch = "user Cristiano Ronaldo ronaldo@example.com 5555555555 Male",
                            Gender = "Male",
                            IsActive = true,
                            LastName = "Ronaldo",
                            Modified = new DateTime(2024, 4, 25, 6, 45, 48, 93, DateTimeKind.Utc).AddTicks(4139),
                            PasswordHash = new byte[] { 223, 231, 42, 207, 46, 179, 133, 147, 173, 238, 67, 180, 154, 119, 1, 162, 52, 147, 128, 59, 223, 110, 126, 132, 136, 147, 59, 174, 173, 128, 68, 224, 54, 86, 41, 14, 181, 17, 155, 223, 150, 219, 226, 65, 224, 188, 8, 48, 45, 146, 129, 152, 123, 66, 219, 219, 110, 158, 32, 210, 50, 163, 165, 220 },
                            PasswordSalt = new byte[] { 36, 143, 27, 76, 136, 181, 34, 203, 181, 121, 78, 146, 152, 124, 64, 68, 178, 221, 197, 9, 200, 210, 109, 220, 142, 254, 28, 248, 138, 215, 28, 180, 73, 183, 165, 88, 123, 66, 131, 180, 189, 64, 231, 88, 249, 181, 235, 121, 174, 178, 202, 24, 181, 254, 206, 235, 240, 78, 55, 140, 19, 226, 115, 66, 145, 26, 215, 73, 217, 113, 94, 210, 139, 157, 218, 211, 139, 10, 15, 149, 18, 87, 102, 213, 110, 8, 176, 74, 35, 121, 12, 8, 164, 34, 3, 74, 64, 148, 51, 251, 54, 112, 244, 111, 69, 120, 113, 251, 77, 173, 180, 252, 131, 238, 98, 230, 224, 192, 161, 34, 171, 28, 220, 8, 250, 121, 42, 196 },
                            PhoneNumber = "5555555555",
                            RoleId = new Guid("3ad02241-89a4-4e1a-8de4-ea57a412fba2"),
                            UserName = "user"
                        });
                });

            modelBuilder.Entity("TestingSystem.Data.Entities.UserRole", b =>
                {
                    b.Property<Guid>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            RoleId = new Guid("e22bb0c2-ff66-42e7-b52d-cbca29875342"),
                            RoleName = "Admin"
                        },
                        new
                        {
                            RoleId = new Guid("c2cbf9f8-152a-41af-a167-19c58f4ec82b"),
                            RoleName = "Teacher"
                        },
                        new
                        {
                            RoleId = new Guid("3ad02241-89a4-4e1a-8de4-ea57a412fba2"),
                            RoleName = "User"
                        });
                });

            modelBuilder.Entity("TestingSystem.Data.Entities.WebUserChoose", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AnswerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AnswerText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("CorrectAnswer")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("WebUserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AnswerId");

                    b.HasIndex("QuestionId");

                    b.HasIndex("WebUserId");

                    b.ToTable("WebUserChooses", (string)null);
                });

            modelBuilder.Entity("TestingSystem.Data.Entities.Answer", b =>
                {
                    b.HasOne("TestingSystem.Data.Entities.Question", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("TestingSystem.Data.Entities.Category.CategoryTranslation", b =>
                {
                    b.HasOne("TestingSystem.Data.Entities.Category.Category", "Category")
                        .WithMany("CategoryTranslations")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TestingSystem.Data.Entities.LanguageTag", "Language")
                        .WithMany("CategoryTranslations")
                        .HasForeignKey("LanguageCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("TestingSystem.Data.Entities.Course.Course", b =>
                {
                    b.HasOne("TestingSystem.Data.Entities.User", "Author")
                        .WithMany("Courses")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("TestingSystem.Data.Entities.Category.Category", "Category")
                        .WithMany("Courses")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("TestingSystem.Data.Entities.Course.CourseTeacher", "CourseTeacher")
                        .WithMany("Courses")
                        .HasForeignKey("CourseTeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Category");

                    b.Navigation("CourseTeacher");
                });

            modelBuilder.Entity("TestingSystem.Data.Entities.Course.CourseDetail", b =>
                {
                    b.HasOne("TestingSystem.Data.Entities.Course.Course", "Course")
                        .WithMany("CourseDetails")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("TestingSystem.Data.Entities.Course.CourseDetailTranslation", b =>
                {
                    b.HasOne("TestingSystem.Data.Entities.Course.CourseDetail", "CourseDetail")
                        .WithMany("CourseDetailTranslations")
                        .HasForeignKey("CourseDetailId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TestingSystem.Data.Entities.LanguageTag", "Language")
                        .WithMany("CourseDetailTranslations")
                        .HasForeignKey("LanguageCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CourseDetail");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("TestingSystem.Data.Entities.Course.CourseTeacherTranslation", b =>
                {
                    b.HasOne("TestingSystem.Data.Entities.Course.CourseTeacher", "CourseTeacher")
                        .WithMany("CourseTeacherTranslations")
                        .HasForeignKey("CourseTeacherId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TestingSystem.Data.Entities.LanguageTag", "Language")
                        .WithMany("CourseTeacherTranslations")
                        .HasForeignKey("LanguageCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CourseTeacher");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("TestingSystem.Data.Entities.Course.CourseTranslation", b =>
                {
                    b.HasOne("TestingSystem.Data.Entities.Course.Course", "Course")
                        .WithMany("CourseTranslations")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TestingSystem.Data.Entities.LanguageTag", "Language")
                        .WithMany("CourseTranslations")
                        .HasForeignKey("LanguageCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("TestingSystem.Data.Entities.Exam", b =>
                {
                    b.HasOne("TestingSystem.Data.Entities.User", "Teacher")
                        .WithMany("Exams")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("TestingSystem.Data.Entities.Lession", b =>
                {
                    b.HasOne("TestingSystem.Data.Entities.Course.Course", "Course")
                        .WithMany("Lessions")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("TestingSystem.Data.Entities.LessionTranslation", b =>
                {
                    b.HasOne("TestingSystem.Data.Entities.LanguageTag", "Language")
                        .WithMany("LessionTranslations")
                        .HasForeignKey("LanguageCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TestingSystem.Data.Entities.Lession", "Lession")
                        .WithMany("LessionTranslations")
                        .HasForeignKey("LessionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("Lession");
                });

            modelBuilder.Entity("TestingSystem.Data.Entities.Question", b =>
                {
                    b.HasOne("TestingSystem.Data.Entities.Exam", "Exam")
                        .WithMany("Questions")
                        .HasForeignKey("ExamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exam");
                });

            modelBuilder.Entity("TestingSystem.Data.Entities.Submission", b =>
                {
                    b.HasOne("TestingSystem.Data.Entities.Exam", "Exam")
                        .WithMany("Submissions")
                        .HasForeignKey("ExamId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TestingSystem.Data.Entities.User", "Student")
                        .WithMany("Submissions")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Exam");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("TestingSystem.Data.Entities.User", b =>
                {
                    b.HasOne("TestingSystem.Data.Entities.UserRole", "UserRole")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("UserRole");
                });

            modelBuilder.Entity("TestingSystem.Data.Entities.WebUserChoose", b =>
                {
                    b.HasOne("TestingSystem.Data.Entities.Answer", "Answer")
                        .WithMany("WebUserChooses")
                        .HasForeignKey("AnswerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TestingSystem.Data.Entities.Question", "Question")
                        .WithMany("WebUserChooses")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TestingSystem.Data.Entities.User", "WebUser")
                        .WithMany()
                        .HasForeignKey("WebUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Answer");

                    b.Navigation("Question");

                    b.Navigation("WebUser");
                });

            modelBuilder.Entity("TestingSystem.Data.Entities.Answer", b =>
                {
                    b.Navigation("WebUserChooses");
                });

            modelBuilder.Entity("TestingSystem.Data.Entities.Category.Category", b =>
                {
                    b.Navigation("CategoryTranslations");

                    b.Navigation("Courses");
                });

            modelBuilder.Entity("TestingSystem.Data.Entities.Course.Course", b =>
                {
                    b.Navigation("CourseDetails");

                    b.Navigation("CourseTranslations");

                    b.Navigation("Lessions");
                });

            modelBuilder.Entity("TestingSystem.Data.Entities.Course.CourseDetail", b =>
                {
                    b.Navigation("CourseDetailTranslations");
                });

            modelBuilder.Entity("TestingSystem.Data.Entities.Course.CourseTeacher", b =>
                {
                    b.Navigation("CourseTeacherTranslations");

                    b.Navigation("Courses");
                });

            modelBuilder.Entity("TestingSystem.Data.Entities.Exam", b =>
                {
                    b.Navigation("Questions");

                    b.Navigation("Submissions");
                });

            modelBuilder.Entity("TestingSystem.Data.Entities.LanguageTag", b =>
                {
                    b.Navigation("CategoryTranslations");

                    b.Navigation("CourseDetailTranslations");

                    b.Navigation("CourseTeacherTranslations");

                    b.Navigation("CourseTranslations");

                    b.Navigation("LessionTranslations");
                });

            modelBuilder.Entity("TestingSystem.Data.Entities.Lession", b =>
                {
                    b.Navigation("LessionTranslations");
                });

            modelBuilder.Entity("TestingSystem.Data.Entities.Question", b =>
                {
                    b.Navigation("Answers");

                    b.Navigation("WebUserChooses");
                });

            modelBuilder.Entity("TestingSystem.Data.Entities.User", b =>
                {
                    b.Navigation("Courses");

                    b.Navigation("Exams");

                    b.Navigation("Submissions");
                });

            modelBuilder.Entity("TestingSystem.Data.Entities.UserRole", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
